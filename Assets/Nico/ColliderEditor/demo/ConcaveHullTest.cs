#if UNITY_EDITORusing System;using UnityEngine;using System.Collections.Generic;using ColliderEditor;namespace ConcaveHull{    public class ConcaveHullTest : MonoBehaviour    {        public List<Node> points = new List<Node>(); //Used only for the demo        public Hull hull;        public string seed;        public int scaleFactor;        public int num;        [Range(-1, 1)] public double concavity;        public void GenerateHull()        {            points = RandomPoints(num);            hull = new Hull(points, concavity, scaleFactor);        }        public List<Node> RandomPoints(int num)        {            List<Node> ans = new List<Node>();            // This method is only used for the demo!            System.Random pseudorandom = new System.Random(seed.GetHashCode());            for (int i = 0; i < num; i++)            {                ans.Add(new Node(pseudorandom.Next(0, 100), pseudorandom.Next(0, 100)));            }            return ans;        }        private void OnGUI()        {            if (GUI.Button(new Rect(10, 10, 100, 30), "Generate"))            {                GenerateHull();            }        }        // Unity demo visualization        void OnDrawGizmos()        {            if (hull == null) return;            // Convex hull            Gizmos.color = Color.yellow;            for (int i = 0; i < hull.convexLines.Count; i++)            {                Line line = hull.convexLines[i];                Vector2 left = line.start.ToVector2();                Vector2 right = line.end.ToVector2();                Gizmos.DrawLine(left, right);            }            // Concave hull            Gizmos.color = Color.blue;            for (int i = 0; i < hull.concaveLines.Count; i++)            {                Line line = hull.concaveLines[i];                Vector2 left = line.start.ToVector2();                Vector2 right = line.end.ToVector2();                Gizmos.DrawLine(left, right);            }            // Dots            Gizmos.color = Color.red;            for (int i = 0; i < points.Count; i++)            {                Gizmos.DrawSphere(new Vector3((float)points[i].x, (float)points[i].y, 0), 0.5f);            }        }    }}#endif